1.物件（Object）
	- 物件是JS中的引用資料類型
	- 物件是一種複合資料類型，在物件中可以保存多個不同資料類型的屬性
	- 使用typeof檢查一個物件時，會返回object
	- 新建物件
		- 方式一：
			- var obj = new Object();
		- 方式二：
			- var obj = {};
			
	- 向物件中添加屬性
		- 語法：
			物件.屬性名 = 屬性值;
			物件["屬性名"] = 屬性值;
			
			- 物件的屬性名沒有任何要求，不需要遵守識別字的規範，
				但是在開發中，儘量按照識別字的要求去寫。
			- 屬性值也可以任意的資料類型。

	- 讀取物件中的屬性
		- 語法：
			物件.屬性名
			物件["屬性名"]
		- 如果讀取一個物件中沒有的屬性，它不會報錯，而是返回一個undefined
		
	- 刪除物件中的屬性
		- 語法：
			delete 物件.屬性名
			delete 物件["屬性名"]
			
	- 使用in檢查物件中是否含有指定屬性
		- 語法："屬性名" in 物件
			- 如果在物件中含有該屬性，則返回true
				如果沒有則返回false
				
	- 使用物件字面量，在新建物件時直接向物件中添加屬性
		語法：
			var obj = {
							屬性名:屬性值,
							屬性名:屬性值,
							屬性名:屬性值,
							屬性名:屬性值
					}
					
	- 基底資料型別和引用資料類型
		- 基底資料型別
			String Number Boolean Null Undefined
		- 引用資料類型
			Object
		- 基底資料型別的資料，變數是直接保存的它的值。
			變數與變數之間是互相獨立的，修改一個變數不會影響其他的變數。
		- 引用資料類型的資料，變數是保存的物件的引用（記憶體位址）。
			如果多個變數指向的是同一個物件，此時修改一個變數的屬性，會影響其他的變數。
		- 比較兩個變數時，對於基底資料型別，比較的就是值，
			對於引用資料類型比較的是位址，位址相同才相同
			
2.函數（Function）	
	- 函數也是一個物件，也具有普通物件的功能
	- 函數中可以封裝一些代碼，在需要的時候可以去調用函數來執行這些代碼
	- 使用typeof檢查一個函數時會返回function
	- 建立函數
		- 函式宣告
			function 函數名([形參1,形參2...形參N]){
				語句...
			}
		
		- 函數運算式
			var 函數名 = function([形參1,形參2...形參N]){
				語句...
			};
			
	- 調用函數
		- 語法：函數物件([實參1,實參2...實參N]);
			fun() sum() alert() Number() parseInt()
		- 當我們調用函數時，函數中封裝的代碼會按照編寫的循序執行

	- 形參和實參
		- 形參：形式參數
			- 定義函數時，可以在()中定義一個或多個形參，形參之間使用,隔開
				定義形參就相當於在函數內聲明了對應的變數但是並不賦值，
				形參會在調用時才賦值。
				
		- 實參：實際參數
			- 調用函數時，可以在()傳遞實參，傳遞的實參會賦值給對應的形參,
				調用函數時JS解析器不會檢查實參的類型和個數，可以傳遞任意資料類型的值。
				如果實參的數量大於形參，多餘實參將不會賦值，
				如果實參的數量小於形參，則沒有對應實參的形參將會賦值undefined
				
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
